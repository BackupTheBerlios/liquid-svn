/****************************************************************************
** Image collection for project 'KWinLiquidDefault'.
**
** Generated from reading image files: 
**      wm_left.png
**      wm_mid.png
**      wm_right.png
**
** Created: Sat Apr 6 13:47:24 2002
**      by:  The User Interface Compiler (uic)
**
** WARNING! All changes made in this file will be lost!
****************************************************************************/
#include <qimage.h>
#include <qdict.h>
#include <qmime.h>
#include <qdragobject.h>
// wm_left.png
static const QRgb image_0_data[] = {
   0x0,0x0,0x0,0xffbdbdbd,0xff7d7d7d,0xff525252,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,
    0xff515151,0xff515151,0xff515151,0xff515151,0x0,0x0,0xff9d9d9d,0xff616161,0xff555555,0xff757575,0xff878787,0xff878787,0xff878787,0xff878787,
    0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0x0,0xffacacac,0xff6e6e6e,0xff7d7d7d,0xff9e9e9e,0xffb9b9b9,
    0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0x0,0xff7a7a7a,
    0xff848484,0xffa7a7a7,0xffbfbfbf,0xffd1d1d1,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffd7d7d7,
    0xffdadada,0xffdadada,0xff9a9a9a,0xff7f7f7f,0xff9e9e9e,0xffb3b3b3,0xffc2c2c2,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,
    0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xff8d8d8d,0xff999999,0xffb0b0b0,0xffbababa,0xffc2c2c2,0xffc4c4c4,0xffc3c3c3,0xffc3c3c3,
    0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xff939393,0xffb0b0b0,0xffc1c1c1,0xffc6c6c6,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xff939393,0xffb0b0b0,0xffc1c1c1,0xffc6c6c6,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xff9c9c9c,0xffbfbfbf,0xffcecece,0xffd4d4d4,0xffdadada,0xffdbdbdb,0xffdedede,0xffdedede,0xffdedede,0xffdedede,
    0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdbdbdb,0xff9c9c9c,0xffbfbfbf,0xffcecece,0xffd4d4d4,0xffdadada,0xffdbdbdb,
    0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdbdbdb,0xff9d9d9d,0xffcdcdcd,
    0xffdbdbdb,0xffe0e0e0,0xffe4e4e4,0xffe8e8e8,0xffebebeb,0xffebebeb,0xffebebeb,0xffebebeb,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffebebeb,
    0xffe9e9e9,0xffe9e9e9,0xff979797,0xffd1d1d1,0xffe1e1e1,0xffededed,0xfff1f1f1,0xfff5f5f5,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,
    0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,0xfff6f6f6,0xff909090,0xffb7b7b7,0xffe2e2e2,0xfff1f1f1,0xfff8f8f8,0xfffdfdfd,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xfffdfdfd,0xffffffff,0xfffdfdfd,0xffffffff,0xffffffff,0xfffdfdfd,0xfffdfdfd,0xff939393,0xff8d8d8d,0xffd1d1d1,0xfff2f2f2,
    0xfffdfdfd,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0x0,0xff878787,0xff9b9b9b,0xffd5d5d5,0xfffbfbfb,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0x0,0xffababab,0xff848484,0xff818181,0xffa9a9a9,0xffcccccc,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,
    0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0x0,0x0,0xffa5a5a5,0xff818181,0xff747474,0xff6f6f6f,
    0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff515151,0x0,0x0,
    0x0,0xffaeaeae,0xff949494,0xff898989,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,
    0xff7b7b7b,0xff7b7b7b
};

// wm_mid.png
static const QRgb image_1_data[] = {
    0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,
    0xff515151,0xff515151,0xff515151,0xff515151,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,
    0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,
    0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffd7d7d7,0xffd7d7d7,
    0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffd7d7d7,
    0xffdadada,0xffdadada,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,
    0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,
    0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,
    0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdbdbdb,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,
    0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdbdbdb,0xffebebeb,0xffebebeb,
    0xffebebeb,0xffebebeb,0xffebebeb,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffebebeb,
    0xffe9e9e9,0xffe9e9e9,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,
    0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,0xfff6f6f6,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfffdfdfd,0xffffffff,
    0xfffdfdfd,0xffffffff,0xffffffff,0xfffdfdfd,0xffffffff,0xfffdfdfd,0xffffffff,0xffffffff,0xfffdfdfd,0xfffdfdfd,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,
    0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,
    0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff7c7c7c,0xff7c7c7c,
    0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,
    0xff7b7b7b,0xff7b7b7b
};

// wm_right.png
static const QRgb image_2_data[] = {
    0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff515151,0xff525252,0xff7d7d7d,
    0xffbdbdbd,0x0,0x0,0x0,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,0xff878787,
    0xff878787,0xff878787,0xff757575,0xff555555,0xff616161,0xff9d9d9d,0x0,0x0,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,
    0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffc6c6c6,0xffb9b9b9,0xff9e9e9e,0xff7d7d7d,0xff6e6e6e,0xffacacac,0x0,0xffdadada,0xffdadada,
    0xffd7d7d7,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffdadada,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd7d7d7,0xffd1d1d1,0xffbfbfbf,0xffa7a7a7,0xff848484,
    0xff7a7a7a,0x0,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,0xffcacaca,
    0xffcacaca,0xffc2c2c2,0xffb3b3b3,0xff9e9e9e,0xff7f7f7f,0xff9a9a9a,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,
    0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc3c3c3,0xffc4c4c4,0xffc2c2c2,0xffbababa,0xffb0b0b0,0xff999999,0xff8d8d8d,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffc6c6c6,0xffc1c1c1,0xffb0b0b0,0xff939393,
    0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,0xffcccccc,
    0xffc6c6c6,0xffc1c1c1,0xffb0b0b0,0xff939393,0xffdbdbdb,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdedede,0xffdbdbdb,0xffdedede,0xffdedede,0xffdedede,
    0xffdedede,0xffdedede,0xffdbdbdb,0xffdadada,0xffd4d4d4,0xffcecece,0xffbfbfbf,0xff9c9c9c,0xffdbdbdb,0xffdbdbdb,0xffdedede,0xffdedede,0xffdbdbdb,0xffdedede,
    0xffdbdbdb,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdedede,0xffdbdbdb,0xffdadada,0xffd4d4d4,0xffcecece,0xffbfbfbf,0xff9c9c9c,0xffe9e9e9,0xffe9e9e9,
    0xffebebeb,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffe9e9e9,0xffebebeb,0xffebebeb,0xffebebeb,0xffebebeb,0xffebebeb,0xffe8e8e8,0xffe4e4e4,0xffe0e0e0,0xffdbdbdb,
    0xffcdcdcd,0xff9d9d9d,0xfff6f6f6,0xfff6f6f6,0xfff8f8f8,0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff6f6f6,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,0xfff8f8f8,
    0xfff5f5f5,0xfff1f1f1,0xffededed,0xffe1e1e1,0xffd1d1d1,0xff979797,0xfffdfdfd,0xfffdfdfd,0xffffffff,0xffffffff,0xfffdfdfd,0xffffffff,0xfffdfdfd,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfffdfdfd,0xfff8f8f8,0xfff1f1f1,0xffe2e2e2,0xffb7b7b7,0xff909090,0xffffffff,0xffffffff,0xffffffff,0xffffffff,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfffdfdfd,0xfff2f2f2,0xffd1d1d1,0xff8d8d8d,0xff939393,
    0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xffffffff,0xfffbfbfb,
    0xffd5d5d5,0xff9b9b9b,0xff878787,0x0,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,0xffe9e9e9,
    0xffe9e9e9,0xffe9e9e9,0xffcccccc,0xffa9a9a9,0xff818181,0xff848484,0xffababab,0x0,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,
    0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6e6e6e,0xff6f6f6f,0xff747474,0xff818181,0xffa5a5a5,0x0,0x0,0xff7b7b7b,0xff7b7b7b,
    0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7b7b7b,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff7c7c7c,0xff898989,0xff949494,0xffaeaeae,0x0,
    0x0,0x0
};

static struct EmbedImage {
    int width, height, depth;
    const unsigned char *data;
    int numColors;
    const QRgb *colorTable;
    bool alpha;
    const char *name;
} embed_image_vec[] = {
    { 18, 18, 32, (const unsigned char*)image_0_data, 0, 0, TRUE, "wm_left" },
    { 18, 18, 32, (const unsigned char*)image_1_data, 0, 0, TRUE, "wm_mid" },
    { 18, 18, 32, (const unsigned char*)image_2_data, 0, 0, TRUE, "wm_right" },
    { 0, 0, 0, 0, 0, 0, 0, 0 }
};

static QDict<QImage> *KWinLiquidDefaultimage_dict = 0;
static QImage& uic_findImage_KWinLiquidDefault( const QString& name )
{
    if ( !KWinLiquidDefaultimage_dict ) {
        KWinLiquidDefaultimage_dict = new QDict<QImage>;
        KWinLiquidDefaultimage_dict->setAutoDelete( TRUE );
    }
    QImage* img = KWinLiquidDefaultimage_dict->find(name);
    if ( !img ) {
        for (int i=0; embed_image_vec[i].data; i++) {
        if ( QString::fromUtf8(embed_image_vec[i].name) == name ) {
                img = new QImage((uchar*)embed_image_vec[i].data,
                        embed_image_vec[i].width,
                        embed_image_vec[i].height,
                        embed_image_vec[i].depth,
                        (QRgb*)embed_image_vec[i].colorTable,
                        embed_image_vec[i].numColors,
                        QImage::BigEndian
		);
	    if ( embed_image_vec[i].alpha )
	        img->setAlphaBuffer(TRUE);
	    break;
	}
        }
        if ( !img ) {
            static QImage dummy;
            return dummy;
        } else {
            KWinLiquidDefaultimage_dict->insert( name, img );
        }
    }
    return *img;
}

static QImage* adjustHSVImage(QImage &img, const QColor &c, QColor bgColor, bool blend)
{
    if(img.depth() != 32)
        img = img.convertDepth(32);
    QImage *dest = new QImage(img.width(), img.height(), 32);
    dest->setAlphaBuffer(true);
    unsigned int *data = (unsigned int *)img.bits();
    unsigned int *destData = (unsigned int*)dest->bits();
    int total = img.width()*img.height();
    int current;
    int delta;
    int destR, destG, destB, alpha;
    int srcR = c.red()+20;
    int srcG = c.green()+20;
    int srcB = c.blue()+20;
    float srcPercent, destPercent;
    for(current=0; current < total; ++current){
        alpha = qAlpha(data[current]);
        delta = 255-qRed(data[current]);
        destR = srcR-delta;
        destG = srcG-delta;
        destB = srcB-delta;
        if(destR < 0) destR = 0;
        if(destG < 0) destG = 0;
        if(destB < 0) destB = 0;
        if(destR > 255) destR = 255;
        if(destG > 255) destG = 255;
        if(destB > 255) destB = 255;

        if(blend && alpha != 255 && alpha !=0){
            srcPercent = ((float)alpha)/255.0;
            destPercent = 1.0-srcPercent;
            destR = (int)((srcPercent*destR) + (destPercent*bgColor.red()));
            destG = (int)((srcPercent*destG) + (destPercent*bgColor.green()));
            destB = (int)((srcPercent*destB) + (destPercent*bgColor.blue()));
            alpha = 255;
        }
        destData[current] = qRgba(destR, destG, destB, alpha);
    }
    return(dest);
}


class DesignerMimeSourceFactory_KWinLiquidDefault : public QMimeSourceFactory
{
public:
    DesignerMimeSourceFactory_KWinLiquidDefault() {}
    const QMimeSource* data( const QString& abs_name ) const {
	QImage img;
	if ( !!abs_name )
	    img = uic_findImage_KWinLiquidDefault( abs_name );
	if ( !img.isNull() ) {
	    QMimeSourceFactory::defaultFactory()->setImage( abs_name, img );
	    return QMimeSourceFactory::defaultFactory()->data( abs_name );
	} else {
	    QMimeSourceFactory::removeFactory( (QMimeSourceFactory*)this );
	    const QMimeSource *s = QMimeSourceFactory::defaultFactory()->data( abs_name );
	    QMimeSourceFactory::addFactory( (QMimeSourceFactory*)this );
	    return s;
	}
	return 0;
    };
};
static DesignerMimeSourceFactory_KWinLiquidDefault  *designerMimeSourceFactory = 0;
static void qInitImages_KWinLiquidDefault()
{
    if ( designerMimeSourceFactory )
	return;
    designerMimeSourceFactory = new DesignerMimeSourceFactory_KWinLiquidDefault;
    QMimeSourceFactory::defaultFactory()->addFactory( designerMimeSourceFactory );
}
static void qCleanupImages_KWinLiquidDefault()
{
    delete KWinLiquidDefaultimage_dict;
    KWinLiquidDefaultimage_dict = 0;
    if ( !designerMimeSourceFactory )
	return;
    QMimeSourceFactory::defaultFactory()->removeFactory( designerMimeSourceFactory );
    delete designerMimeSourceFactory;
    designerMimeSourceFactory = 0;
}
class StaticInitImages_KWinLiquidDefault
{
public:
    StaticInitImages_KWinLiquidDefault() { qInitImages_KWinLiquidDefault(); }
    ~StaticInitImages_KWinLiquidDefault() { qCleanupImages_KWinLiquidDefault(); }
};
static StaticInitImages_KWinLiquidDefault staticImages;
